{"version":3,"sources":["components/NavBar.js","actions/summaries.js","components/SummaryCard.js","components/SummaryList.js","components/CountryCard.js","components/CountryList.js","actions/index.js","App.js","serviceWorker.js","reducers/rootReducers.js","reducers/countriesReducer.js","reducers/summariesReducer.js","index.js"],"names":["NavBar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","to","Link","Jumbotron","fetchSummaries","dispatch","fetch","then","resp","json","summaries","type","payload","SummaryCard","data","newdate","Date","parseInt","updated","toString","CardDeck","Card","text","style","margin","Body","Title","Text","cases","Footer","deaths","recovered","SummaryList","this","props","console","log","map","i","key","Component","connect","state","CountryCard","Img","variant","src","flag","country","active","critical","tests","today_cases","today_deaths","population","CountryList","setSearchCountries","e","preventDefault","setState","search","filter","handleChange","target","name","value","fetchCountries","allcountries","countries","item","toLowerCase","includes","class","Form","onSubmit","Group","controlId","Label","Control","placeholder","onChange","Button","App","exact","path","render","routerProps","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+SAmCeA,EA5BA,WAEb,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACxB,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,0BAEA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAAC,gBAAD,CAAeC,GAAG,YAAW,kBAACF,EAAA,EAAIG,KAAL,CAAUD,GAAG,YAAb,kBAE7B,kBAAC,gBAAD,CAAeA,GAAG,cAAa,kBAACF,EAAA,EAAIG,KAAL,CAAUD,GAAG,cAAb,yBAKrC,kBAACE,EAAA,EAAD,KACE,sDACA,kE,eCxBKC,EAAiB,WAC5B,OAAO,SAACC,GACN,OAAOC,MAAM,mCACVC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAEJL,EAAS,CAAEM,KAAM,gBAAiBC,QAASF,SCiEpCG,MAhEf,YAAgC,IAATC,EAAQ,EAARA,KAGfC,EADO,IAAIC,KAAKC,SAASH,EAAKI,UACfC,WAErB,OACE,kBAAEC,EAAA,EAAF,KACE,kBAACC,EAAA,EAAD,CACE9B,GAAG,YACH+B,KAAK,QACLtB,UAAU,cACVuB,MAAO,CAAEC,OAAQ,SAEjB,kBAACH,EAAA,EAAKI,KAAN,KACE,kBAACJ,EAAA,EAAKK,MAAN,sBACA,kBAACL,EAAA,EAAKM,KAAN,KACGb,EAAKc,QAGV,kBAACP,EAAA,EAAKQ,OAAN,KACE,gDAAsBd,KAK1B,kBAACM,EAAA,EAAD,CACE9B,GAAG,SACH+B,KAAK,QACLtB,UAAU,cACVuB,MAAO,CAAEC,OAAQ,SAEjB,kBAACH,EAAA,EAAKI,KAAN,KACE,kBAACJ,EAAA,EAAKK,MAAN,sBACA,kBAACL,EAAA,EAAKM,KAAN,KACGb,EAAKgB,SAGV,kBAACT,EAAA,EAAKQ,OAAN,KACE,gDAAsBd,KAG1B,kBAACM,EAAA,EAAD,CACE9B,GAAG,UACH+B,KAAK,QACLtB,UAAU,cACVuB,MAAO,CAAEC,OAAQ,SAEjB,kBAACH,EAAA,EAAKI,KAAN,KACE,kBAACJ,EAAA,EAAKK,MAAN,yBACA,kBAACL,EAAA,EAAKM,KAAN,KACGb,EAAKiB,YAGV,kBAACV,EAAA,EAAKQ,OAAN,KACE,+CAAqBd,O,QCxDzBiB,E,kLAEFC,KAAKC,MAAM9B,mB,+BAIX,OADA+B,QAAQC,IAAIH,KAAKC,OACTD,KAAKC,MAAMxB,UAAU2B,KAAI,SAACvB,EAAMwB,GAAP,OAAa,kBAAC,EAAD,CAAaxB,KAAMA,EAAMyB,IAAKD,W,GANtDE,aAcXC,mBAHf,SAAyBC,GACvB,MAAO,CAAEhC,UAAWgC,EAAMhC,aAEY,CAAEN,kBAA3BqC,CAA6CT,G,yBCa7CW,MAvBf,YAAgC,IAAT7B,EAAQ,EAARA,KACrB,OAAQ,kBAACO,EAAA,EAAD,CACN9B,GAAG,QACH+B,KAAK,OACLtB,UAAU,cACVuB,MAAO,CAAEC,OAAQ,SAGjB,kBAACH,EAAA,EAAKuB,IAAN,CAAUC,QAAQ,MAAMC,IAAKhC,EAAKiC,OAClC,kBAAC1B,EAAA,EAAKI,KAAN,KACE,kBAACJ,EAAA,EAAKK,MAAN,KAAaZ,EAAKkC,SAClB,kBAAC3B,EAAA,EAAKM,KAAN,cAAkBb,EAAKc,OAEvB,kBAACP,EAAA,EAAKM,KAAN,kBAAsBb,EAAKiB,WAC3B,kBAACV,EAAA,EAAKM,KAAN,eAAmBb,EAAKmC,QACxB,kBAAC5B,EAAA,EAAKM,KAAN,iBAAqBb,EAAKoC,UAC1B,kBAAC7B,EAAA,EAAKM,KAAN,cAAkBb,EAAKqC,OACvB,kBAAC9B,EAAA,EAAKM,KAAN,sBAA0Bb,EAAKsC,aAC/B,kBAAC/B,EAAA,EAAKM,KAAN,uBAA2Bb,EAAKuC,cAChC,kBAAChC,EAAA,EAAKM,KAAN,mBAAuBb,EAAKwC,e,gBCpB5BC,E,kDACJ,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IAWRsB,mBAAqB,SAAAC,GACnBA,EAAEC,iBACF,EAAKC,SAAS,CACZC,OAAQ,EAAKlB,MAAMmB,UAfJ,EAmBnBC,aAAe,SAAAL,GACbA,EAAEC,eACF,EAAKC,SAAL,eACGF,EAAEM,OAAOC,KAAOP,EAAEM,OAAOE,SApB5B,EAAKvB,MAAQ,CACXkB,OAAQ,GACRC,OAAQ,IAJO,E,gEAUjB5B,KAAKC,MAAMgC,mB,+BAgBH,IAAD,OAGDC,EADgBlC,KAAKC,MAAMkC,UAAUP,QAAO,SAAAQ,GAAI,OAAIA,EAAKrB,QAAQsB,cAAcC,SAAS,EAAK7B,MAAMkB,OAAOU,kBAC7EjC,KAAI,SAACvB,EAAMwB,GAAP,OAAa,kBAAC,EAAD,CAAaxB,KAAMA,EAAMyB,IAAKD,OAElF,OACE,6BACE,0BAAMkC,MAAM,eACV,kBAAEC,EAAA,EAAF,CAAOC,SAAUzC,KAAKuB,oBACpB,kBAACiB,EAAA,EAAKE,MAAN,CAAYC,UAAU,mBACpB,kBAACH,EAAA,EAAKI,MAAN,uBACA,kBAACJ,EAAA,EAAKK,QAAN,CACEnE,KAAK,OACLY,MAAO,CAAEC,OAAQ,QACjBuD,YAAY,qBACZf,KAAK,SACLC,MAAOhC,KAAKS,MAAMmB,OAClBmB,SAAU/C,KAAK6B,eAEjB,kBAACmB,EAAA,EAAD,CAAQpC,QAAQ,UAAUlC,KAAK,UAA/B,aAQN,kBAAE,IAAF,KAAYwD,Q,GAtDM3B,aAoEXC,eARS,SAAAC,GACtB,MAAO,CACL0B,UAAW1B,EAAM0B,aAMmB,CAAEF,eC9EZ,WAC5B,OAAO,SAAC7D,GACN,OAAOC,MAAM,mCACVC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAA6D,GACJ/D,EAAS,CAAEM,KAAM,gBAAiBC,QAASwD,UDyEpC3B,CAA6Cc,GErEtD2B,E,kLAGFjD,KAAKC,MAAM9B,mB,+BAKX,OACE,6BACE,kBAAC,gBAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAO+E,OAAK,EAACC,KAAM,WAAYC,OAAQ,SAACC,GAAD,OAAiB,kBAAC,EAAgBA,MACzE,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAM,aAAcC,OAAQ,SAACC,GAAD,OAAiB,kBAAC,EAAgBA,a,GAfrE9C,aAiCHC,eATS,SAAAC,GACtB,MAAO,CACLhC,UAAWgC,EAAMhC,aAOmB,CAAEN,kBAA3BqC,CAA6CyC,G,gBC9BxCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCRSC,EALKC,0BAAgB,CAElCzB,UCPa,WAAyB,IAAxB1B,EAAuB,uDAAf,GAAIoD,EAAW,uCACrC,OAAQA,EAAOnF,MACb,IAAK,gBAEH,OAAO,YAAImF,EAAOlF,SACpB,QACE,OAAO8B,IDCAhC,UEPE,WAAyB,IAAxBgC,EAAuB,uDAAf,GAAIoD,EAAW,uCACrC,OAAQA,EAAOnF,MACb,IAAK,gBAEH,OAAO,YAAImF,EAAOlF,SACpB,QACE,OAAO8B,M,QCKPqD,EAAQC,sBAAYJ,EAAaK,8BACrCC,0BAAgBC,OAKlBC,IAASf,OACP,kBAAC,IAAMgB,WAAP,KAEE,kBAAC,IAAD,CAAUN,MAAOA,GAEf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SJ0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnG,MAAK,SAAAoG,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3E,QAAQ2E,MAAMA,EAAMC,c","file":"static/js/main.c6e031a4.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport Nav from 'react-bootstrap/Nav'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\n\n\nconst NavBar = () => {\n\n  return (\n    <div >\n      <Navbar bg=\"light\" expand=\"lg\">\n        <Navbar.Brand href=\"/home\">COVID-19 World Tracker</Navbar.Brand>\n\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <LinkContainer to=\"/summary\"><Nav.Link to=\"/summary\"> Global Cases</Nav.Link>\n            </LinkContainer>\n            <LinkContainer to=\"/countries\"><Nav.Link to=\"/countries\"> Cases by Country</Nav.Link></LinkContainer>\n\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <Jumbotron>\n        <h1>COVID-19 World Tracker</h1>\n        <p>\n          This is a Covid-19 case tracker.\n        </p>\n\n      </Jumbotron>\n    </div >\n  );\n}\n\nexport default NavBar;","/* eslint-disable */\n\nexport const fetchSummaries = () => {\n  return (dispatch) => {\n    return fetch('http://localhost:3000/summaries')\n      .then(resp => resp.json())\n      .then(summaries => {\n\n        dispatch({ type: \"SET_SUMMARIES\", payload: summaries })\n      })\n  }\n\n}","\n/* eslint-disable */\nimport React, { Component } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { fetchSummaries } from '../actions/summaries'\n\n\nfunction SummaryCard({ data }) {\n\n  const date = new Date(parseInt(data.updated))\n  const newdate = date.toString()\n\n  return (\n    < CardDeck >\n      <Card\n        bg=\"secondary\"\n        text=\"white\"\n        className=\"text-center\"\n        style={{ margin: \"20px\" }}\n      >\n        <Card.Body>\n          <Card.Title>Global cases </Card.Title>\n          <Card.Text>\n            {data.cases}\n          </Card.Text>\n        </Card.Body>\n        <Card.Footer>\n          <small> Last updated {newdate}</small>\n\n        </Card.Footer>\n      </Card >\n\n      <Card\n        bg=\"danger\"\n        text=\"white\"\n        className=\"text-center\"\n        style={{ margin: \"20px\" }}>\n\n        <Card.Body>\n          <Card.Title>Global deaths</Card.Title>\n          <Card.Text>\n            {data.deaths}\n          </Card.Text>\n        </Card.Body>\n        <Card.Footer>\n          <small> Last updated {newdate}</small>\n        </Card.Footer>\n      </Card>\n      <Card\n        bg=\"success\"\n        text=\"white\"\n        className=\"text-center\"\n        style={{ margin: \"20px\" }}>\n\n        <Card.Body>\n          <Card.Title>Global recovered</Card.Title>\n          <Card.Text>\n            {data.recovered}\n          </Card.Text>\n        </Card.Body>\n        <Card.Footer>\n          <small>Last updated {newdate}</small>\n        </Card.Footer>\n      </Card>\n    </CardDeck >\n\n  )\n\n}\n\n\nexport default SummaryCard","import React, { Component } from 'react';\nimport SummaryCard from './SummaryCard';\nimport { connect } from 'react-redux'\nimport { fetchSummaries } from '../actions/summaries'\n\n\n\nclass SummaryList extends Component {\n  componentDidMount() {\n    this.props.fetchSummaries()\n  }\n  render() {\n    console.log(this.props)\n    return (this.props.summaries.map((data, i) => <SummaryCard data={data} key={i} />))\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return { summaries: state.summaries }\n}\nexport default connect(mapStateToProps, { fetchSummaries })(SummaryList);","\n/* eslint-disable */\nimport React, { Component } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Columned from 'react-columned';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Form from 'react-bootstrap/Form'\nimport { connect } from 'react-redux'\nimport { fetchCountries } from '../actions/index'\n\n\nfunction CountryCard({ data }) {\n  return (<Card\n    bg=\"light\"\n    text=\"dark\"\n    className=\"text-center\"\n    style={{ margin: \"10px\" }}\n  >\n\n    <Card.Img variant=\"top\" src={data.flag} />\n    <Card.Body>\n      <Card.Title>{data.country}</Card.Title>\n      <Card.Text>Cases {data.cases}</Card.Text>\n\n      <Card.Text>Recovered {data.recovered}</Card.Text>\n      <Card.Text>Active {data.active}</Card.Text>\n      <Card.Text>Critical {data.critical}</Card.Text>\n      <Card.Text>Tests {data.tests}</Card.Text>\n      <Card.Text>Today's cases {data.today_cases}</Card.Text>\n      <Card.Text>Today's deaths {data.today_deaths}</Card.Text>\n      <Card.Text>Population {data.population}</Card.Text>\n    </Card.Body>\n  </Card>);\n}\nexport default CountryCard","/* eslint-disable */\nimport React, { Component } from 'react';\nimport Columned from 'react-columned';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { connect } from 'react-redux'\nimport { fetchCountries } from '../actions/index'\nimport CountryCard from './CountryCard'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nclass CountryList extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      search: '',\n      filter: ''\n    };\n    // this.setSearchCountries = this.setSearchCountries.bind(this); // binds the context of this to the\n  }\n\n  componentDidMount() {\n    this.props.fetchCountries()\n  }\n  setSearchCountries = e => {\n    e.preventDefault()\n    this.setState({\n      search: this.state.filter\n    })\n  }\n\n  handleChange = e => {\n    e.preventDefault\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n\n  }\n  render() {\n\n    const filterCountry = this.props.countries.filter(item => item.country.toLowerCase().includes(this.state.search.toLowerCase()))\n    const allcountries = filterCountry.map((data, i) => <CountryCard data={data} key={i} />)\n\n    return (\n      <div>\n        <form class=\"form-inline\">\n          < Form onSubmit={this.setSearchCountries}>\n            <Form.Group controlId=\"formGroupSearch\">\n              <Form.Label>Search Country</Form.Label>\n              <Form.Control\n                type=\"text\"\n                style={{ margin: \"10px\" }}\n                placeholder=\"Enter Country name\"\n                name=\"filter\"\n                value={this.state.filter}\n                onChange={this.handleChange}\n              />\n              <Button variant=\"success\" type=\"submit\" >\n                Search\n              </Button>\n\n\n            </Form.Group>\n          </Form >\n        </form>\n        < Columned>{allcountries}</Columned >\n      </div >\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    countries: state.countries\n\n  }\n\n}\n\nexport default connect(mapStateToProps, { fetchCountries })(CountryList);","export const fetchCountries = () => {\n  return (dispatch) => {\n    return fetch('http://localhost:3000/countries')\n      .then(resp => resp.json())\n      .then(countries => {\n        dispatch({ type: \"SET_COUNTRIES\", payload: countries })\n      })\n  }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NavBar from './components/NavBar';\nimport SummaryList from './components/SummaryList'\nimport CountryList from './components/CountryList'\nimport { connect } from 'react-redux'\nimport { fetchSummaries } from './actions/summaries'\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.fetchSummaries()\n  }\n\n  render() {\n\n    return (\n      < div >\n        <Router>\n          <NavBar />\n          <Switch>\n\n            <Route exact path={'/summary'} render={(routerProps) => <SummaryList {...routerProps} />} />\n            <Route exact path={'/countries'} render={(routerProps) => <CountryList {...routerProps} />} />\n          </Switch>\n\n        </Router>\n      </div >\n    )\n\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    summaries: state.summaries\n\n  }\n\n}\n\n\nexport default connect(mapStateToProps, { fetchSummaries })(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux'\nimport countries from './countriesReducer'\nimport summaries from './summariesReducer'\n//import reducer here\n\nconst rootReducer = combineReducers({\n  //list reducer here\n  countries, summaries\n})\n\nexport default rootReducer","export default (state = [], action) => {\n  switch (action.type) {\n    case 'SET_COUNTRIES':\n\n      return [...action.payload]\n    default:\n      return state\n  }\n\n}","export default (state = [], action) => {\n  switch (action.type) {\n    case 'SET_SUMMARIES':\n\n      return [...action.payload]\n    default:\n      return state\n  }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';//By including the Provider, we'll be able to access our Redux store and/or dispatch actions from any component we want, regardless of where it is on the component tree.\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk'\nimport * as serviceWorker from './serviceWorker';\nimport rootReducer from './reducers/rootReducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(rootReducer, composeWithDevTools(\n  applyMiddleware(thunk)\n))\n//use the createStore method from redux, passing in the provided reducer to create a store\n\n\nReactDOM.render(\n  <React.StrictMode>\n\n    <Provider store={store}>\n\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n//Use Provider from react-redux to wrap <App />, passing store as a prop to the Provider. This will give your components access to the store.\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}