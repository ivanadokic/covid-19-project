{"version":3,"sources":["../src/Columned.js"],"names":["useEffect","React","useRef","useState","style","wrap","display","column","verticalAlign","item","width","overflow","float","elementResizeDetector","Columned","props","containerRef","containerWidth","setContainerWidth","current","offsetWidth","strategy","listenTo","element","uninstall","children","columns","className","columnsCount","renderedColumns","i","push","columnsIndexes","last","Children","forEach","child","map","j","defaultProps"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from \"react\";\nimport elementResizeDetectorMaker from \"element-resize-detector\";\nimport getColumnsCount from \"./utils/getColumnsCount\";\n\nconst { useEffect, useRef, useState } = React;\n\ntype Props = {\n    // An array of elements that need to be shown, for example images.\n    children: React.Node,\n\n    // Number of columns, per container size, eg. { \"320\": 1, \"480\": 2, \"800\": 3, \"1366\": 4 }.\n    columns: number | { [string]: number },\n\n    // Class to append on columns container.\n    className?: string\n};\n\nconst style = {\n    wrap: {\n        display: \"block\"\n    },\n    column: {\n        display: \"inline-block\",\n        verticalAlign: \"top\"\n    },\n    item: {\n        display: \"block\",\n        width: \"100%\",\n        overflow: \"hidden\",\n        float: \"left\"\n    }\n};\n\nlet elementResizeDetector = null;\n\nfunction Columned(props: Props) {\n    const containerRef = useRef();\n\n    const [containerWidth, setContainerWidth]: [number, Function] = useState(0);\n\n    useEffect(() => {\n        if (containerRef.current) {\n            setContainerWidth(containerRef.current.offsetWidth);\n            elementResizeDetector = elementResizeDetectorMaker({\n                strategy: \"scroll\"\n            });\n            elementResizeDetector.listenTo(containerRef.current, element =>\n                setContainerWidth(element.offsetWidth)\n            );\n        }\n\n        return () => {\n            if (elementResizeDetector) {\n                elementResizeDetector.uninstall(containerRef.current);\n                elementResizeDetector = null;\n            }\n        };\n    }, []);\n\n    const { children, columns, className } = props;\n\n    const columnsCount = getColumnsCount(columns, containerWidth);\n\n    const renderedColumns = [];\n    for (let i = 0; i < columnsCount; i++) {\n        renderedColumns.push([]);\n    }\n\n    const columnsIndexes = {\n        current: 0,\n        last: columnsCount - 1\n    };\n\n    // Will not render anything if no children are present.\n    React.Children.forEach(children, child => {\n        renderedColumns[columnsIndexes.current].push(child);\n        if (columnsIndexes.current === columnsIndexes.last) {\n            columnsIndexes.current = 0;\n        } else {\n            columnsIndexes.current++;\n        }\n    });\n\n    return (\n        <react-columned ref={containerRef} style={style.wrap} class={className}>\n            {renderedColumns.map((column, i) => (\n                <react-columned-column\n                    key={i}\n                    style={{ ...style.column, width: `calc(100% / ${columnsCount})` }}\n                >\n                    {column.map((item, j) => (\n                        <react-columned-item style={style.item} key={j}>\n                            {item}\n                        </react-columned-item>\n                    ))}\n                </react-columned-column>\n            ))}\n        </react-columned>\n    );\n}\n\nColumned.defaultProps = {\n    columns: { \"320\": 1, \"480\": 2, \"800\": 3, \"1366\": 4, \"1920\": 6 }\n};\n\nexport default Columned;\n"],"file":"Columned.js"}