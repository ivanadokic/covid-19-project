"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var React = _interopRequireWildcard(require("react"));

var _elementResizeDetector = _interopRequireDefault(require("element-resize-detector"));

var _getColumnsCount = _interopRequireDefault(require("./utils/getColumnsCount"));

var useEffect = React.useEffect,
    useRef = React.useRef,
    useState = React.useState;
var style = {
  wrap: {
    display: "block"
  },
  column: {
    display: "inline-block",
    verticalAlign: "top"
  },
  item: {
    display: "block",
    width: "100%",
    overflow: "hidden",
    float: "left"
  }
};
var elementResizeDetector = null;

function Columned(props) {
  var containerRef = useRef();

  var _useState = useState(0),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      containerWidth = _useState2[0],
      setContainerWidth = _useState2[1];

  useEffect(function () {
    if (containerRef.current) {
      setContainerWidth(containerRef.current.offsetWidth);
      elementResizeDetector = (0, _elementResizeDetector.default)({
        strategy: "scroll"
      });
      elementResizeDetector.listenTo(containerRef.current, function (element) {
        return setContainerWidth(element.offsetWidth);
      });
    }

    return function () {
      if (elementResizeDetector) {
        elementResizeDetector.uninstall(containerRef.current);
        elementResizeDetector = null;
      }
    };
  }, []);
  var children = props.children,
      columns = props.columns,
      className = props.className;
  var columnsCount = (0, _getColumnsCount.default)(columns, containerWidth);
  var renderedColumns = [];

  for (var i = 0; i < columnsCount; i++) {
    renderedColumns.push([]);
  }

  var columnsIndexes = {
    current: 0,
    last: columnsCount - 1
  }; // Will not render anything if no children are present.

  React.Children.forEach(children, function (child) {
    renderedColumns[columnsIndexes.current].push(child);

    if (columnsIndexes.current === columnsIndexes.last) {
      columnsIndexes.current = 0;
    } else {
      columnsIndexes.current++;
    }
  });
  return React.createElement("react-columned", {
    ref: containerRef,
    style: style.wrap,
    class: className
  }, renderedColumns.map(function (column, i) {
    return React.createElement("react-columned-column", {
      key: i,
      style: (0, _objectSpread2.default)({}, style.column, {
        width: "calc(100% / ".concat(columnsCount, ")")
      })
    }, column.map(function (item, j) {
      return React.createElement("react-columned-item", {
        style: style.item,
        key: j
      }, item);
    }));
  }));
}

Columned.defaultProps = {
  columns: {
    "320": 1,
    "480": 2,
    "800": 3,
    "1366": 4,
    "1920": 6
  }
};
var _default = Columned;
exports.default = _default;
//# sourceMappingURL=Columned.js.map