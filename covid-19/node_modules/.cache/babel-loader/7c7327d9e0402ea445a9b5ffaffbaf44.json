{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _elementResizeDetector = _interopRequireDefault(require(\"element-resize-detector\"));\n\nvar _getColumnsCount = _interopRequireDefault(require(\"./utils/getColumnsCount\"));\n\nvar useEffect = React.useEffect,\n    useRef = React.useRef,\n    useState = React.useState;\nvar style = {\n  wrap: {\n    display: \"block\"\n  },\n  column: {\n    display: \"inline-block\",\n    verticalAlign: \"top\"\n  },\n  item: {\n    display: \"block\",\n    width: \"100%\",\n    overflow: \"hidden\",\n    float: \"left\"\n  }\n};\nvar elementResizeDetector = null;\n\nfunction Columned(props) {\n  var containerRef = useRef();\n\n  var _useState = useState(0),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      containerWidth = _useState2[0],\n      setContainerWidth = _useState2[1];\n\n  useEffect(function () {\n    if (containerRef.current) {\n      setContainerWidth(containerRef.current.offsetWidth);\n      elementResizeDetector = (0, _elementResizeDetector.default)({\n        strategy: \"scroll\"\n      });\n      elementResizeDetector.listenTo(containerRef.current, function (element) {\n        return setContainerWidth(element.offsetWidth);\n      });\n    }\n\n    return function () {\n      if (elementResizeDetector) {\n        elementResizeDetector.uninstall(containerRef.current);\n        elementResizeDetector = null;\n      }\n    };\n  }, []);\n  var children = props.children,\n      columns = props.columns,\n      className = props.className;\n  var columnsCount = (0, _getColumnsCount.default)(columns, containerWidth);\n  var renderedColumns = [];\n\n  for (var i = 0; i < columnsCount; i++) {\n    renderedColumns.push([]);\n  }\n\n  var columnsIndexes = {\n    current: 0,\n    last: columnsCount - 1\n  }; // Will not render anything if no children are present.\n\n  React.Children.forEach(children, function (child) {\n    renderedColumns[columnsIndexes.current].push(child);\n\n    if (columnsIndexes.current === columnsIndexes.last) {\n      columnsIndexes.current = 0;\n    } else {\n      columnsIndexes.current++;\n    }\n  });\n  return React.createElement(\"react-columned\", {\n    ref: containerRef,\n    style: style.wrap,\n    class: className\n  }, renderedColumns.map(function (column, i) {\n    return React.createElement(\"react-columned-column\", {\n      key: i,\n      style: (0, _objectSpread2.default)({}, style.column, {\n        width: \"calc(100% / \".concat(columnsCount, \")\")\n      })\n    }, column.map(function (item, j) {\n      return React.createElement(\"react-columned-item\", {\n        style: style.item,\n        key: j\n      }, item);\n    }));\n  }));\n}\n\nColumned.defaultProps = {\n  columns: {\n    \"320\": 1,\n    \"480\": 2,\n    \"800\": 3,\n    \"1366\": 4,\n    \"1920\": 6\n  }\n};\nvar _default = Columned;\nexports.default = _default;","map":{"version":3,"sources":["../src/Columned.js"],"names":["useEffect","useRef","useState","React","style","wrap","display","column","verticalAlign","item","width","overflow","float","elementResizeDetector","containerRef","containerWidth","setContainerWidth","strategy","element","children","columns","className","props","columnsCount","renderedColumns","i","columnsIndexes","current","last","j","Columned"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from \"react\";\nimport elementResizeDetectorMaker from \"element-resize-detector\";\nimport getColumnsCount from \"./utils/getColumnsCount\";\n\nconst { useEffect, useRef, useState } = React;\n\ntype Props = {\n    // An array of elements that need to be shown, for example images.\n    children: React.Node,\n\n    // Number of columns, per container size, eg. { \"320\": 1, \"480\": 2, \"800\": 3, \"1366\": 4 }.\n    columns: number | { [string]: number },\n\n    // Class to append on columns container.\n    className?: string\n};\n\nconst style = {\n    wrap: {\n        display: \"block\"\n    },\n    column: {\n        display: \"inline-block\",\n        verticalAlign: \"top\"\n    },\n    item: {\n        display: \"block\",\n        width: \"100%\",\n        overflow: \"hidden\",\n        float: \"left\"\n    }\n};\n\nlet elementResizeDetector = null;\n\nfunction Columned(props: Props) {\n    const containerRef = useRef();\n\n    const [containerWidth, setContainerWidth]: [number, Function] = useState(0);\n\n    useEffect(() => {\n        if (containerRef.current) {\n            setContainerWidth(containerRef.current.offsetWidth);\n            elementResizeDetector = elementResizeDetectorMaker({\n                strategy: \"scroll\"\n            });\n            elementResizeDetector.listenTo(containerRef.current, element =>\n                setContainerWidth(element.offsetWidth)\n            );\n        }\n\n        return () => {\n            if (elementResizeDetector) {\n                elementResizeDetector.uninstall(containerRef.current);\n                elementResizeDetector = null;\n            }\n        };\n    }, []);\n\n    const { children, columns, className } = props;\n\n    const columnsCount = getColumnsCount(columns, containerWidth);\n\n    const renderedColumns = [];\n    for (let i = 0; i < columnsCount; i++) {\n        renderedColumns.push([]);\n    }\n\n    const columnsIndexes = {\n        current: 0,\n        last: columnsCount - 1\n    };\n\n    // Will not render anything if no children are present.\n    React.Children.forEach(children, child => {\n        renderedColumns[columnsIndexes.current].push(child);\n        if (columnsIndexes.current === columnsIndexes.last) {\n            columnsIndexes.current = 0;\n        } else {\n            columnsIndexes.current++;\n        }\n    });\n\n    return (\n        <react-columned ref={containerRef} style={style.wrap} class={className}>\n            {renderedColumns.map((column, i) => (\n                <react-columned-column\n                    key={i}\n                    style={{ ...style.column, width: `calc(100% / ${columnsCount})` }}\n                >\n                    {column.map((item, j) => (\n                        <react-columned-item style={style.item} key={j}>\n                            {item}\n                        </react-columned-item>\n                    ))}\n                </react-columned-column>\n            ))}\n        </react-columned>\n    );\n}\n\nColumned.defaultProps = {\n    columns: { \"320\": 1, \"480\": 2, \"800\": 3, \"1366\": 4, \"1920\": 6 }\n};\n\nexport default Columned;\n"]},"metadata":{},"sourceType":"script"}