{"ast":null,"code":"export default function mapNodesToColumns() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$children = _ref.children,\n      children = _ref$children === undefined ? [] : _ref$children,\n      _ref$columns = _ref.columns,\n      columns = _ref$columns === undefined ? 1 : _ref$columns,\n      _ref$dimensions = _ref.dimensions,\n      dimensions = _ref$dimensions === undefined ? [] : _ref$dimensions;\n\n  var nodes = [];\n  var heights = [];\n\n  if (columns === 1) {\n    return children;\n  } // use dimensions to calculate the best column for each child\n\n\n  if (dimensions.length && dimensions.length === children.length) {\n    for (var i = 0; i < columns; i++) {\n      nodes[i] = [];\n      heights[i] = 0;\n    }\n\n    children.forEach(function (child, i) {\n      var _dimensions$i = dimensions[i],\n          width = _dimensions$i.width,\n          height = _dimensions$i.height;\n      var index = heights.indexOf(Math.min.apply(Math, heights));\n      nodes[index].push(child);\n      heights[index] += height / width;\n    });\n  } // equally spread the children across the columns\n  else {\n      var _loop = function _loop(_i) {\n        nodes[_i] = children.filter(function (child, j) {\n          return j % columns === _i;\n        });\n      };\n\n      for (var _i = 0; _i < columns; _i++) {\n        _loop(_i);\n      }\n    }\n\n  return nodes;\n}","map":{"version":3,"sources":["/Users/ivana/Desktop/online_projects/covid-19/node_modules/react-columns/es/mapNodesToColumns.js"],"names":["mapNodesToColumns","_ref","arguments","length","undefined","_ref$children","children","_ref$columns","columns","_ref$dimensions","dimensions","nodes","heights","i","forEach","child","_dimensions$i","width","height","index","indexOf","Math","min","apply","push","_loop","_i","filter","j"],"mappings":"AAAA,eAAe,SAASA,iBAAT,GAA6B;AAC1C,MAAIC,IAAI,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;AAAA,MACIG,aAAa,GAAGJ,IAAI,CAACK,QADzB;AAAA,MAEIA,QAAQ,GAAGD,aAAa,KAAKD,SAAlB,GAA8B,EAA9B,GAAmCC,aAFlD;AAAA,MAGIE,YAAY,GAAGN,IAAI,CAACO,OAHxB;AAAA,MAIIA,OAAO,GAAGD,YAAY,KAAKH,SAAjB,GAA6B,CAA7B,GAAiCG,YAJ/C;AAAA,MAKIE,eAAe,GAAGR,IAAI,CAACS,UAL3B;AAAA,MAMIA,UAAU,GAAGD,eAAe,KAAKL,SAApB,GAAgC,EAAhC,GAAqCK,eANtD;;AAQA,MAAIE,KAAK,GAAG,EAAZ;AACA,MAAIC,OAAO,GAAG,EAAd;;AAEA,MAAIJ,OAAO,KAAK,CAAhB,EAAmB;AACjB,WAAOF,QAAP;AACD,GAdyC,CAgB1C;;;AACA,MAAII,UAAU,CAACP,MAAX,IAAqBO,UAAU,CAACP,MAAX,KAAsBG,QAAQ,CAACH,MAAxD,EAAgE;AAC9D,SAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAApB,EAA6BK,CAAC,EAA9B,EAAkC;AAChCF,MAAAA,KAAK,CAACE,CAAD,CAAL,GAAW,EAAX;AACAD,MAAAA,OAAO,CAACC,CAAD,CAAP,GAAa,CAAb;AACD;;AACDP,IAAAA,QAAQ,CAACQ,OAAT,CAAiB,UAAUC,KAAV,EAAiBF,CAAjB,EAAoB;AACnC,UAAIG,aAAa,GAAGN,UAAU,CAACG,CAAD,CAA9B;AAAA,UACII,KAAK,GAAGD,aAAa,CAACC,KAD1B;AAAA,UAEIC,MAAM,GAAGF,aAAa,CAACE,MAF3B;AAIA,UAAIC,KAAK,GAAGP,OAAO,CAACQ,OAAR,CAAgBC,IAAI,CAACC,GAAL,CAASC,KAAT,CAAeF,IAAf,EAAqBT,OAArB,CAAhB,CAAZ;AACAD,MAAAA,KAAK,CAACQ,KAAD,CAAL,CAAaK,IAAb,CAAkBT,KAAlB;AACAH,MAAAA,OAAO,CAACO,KAAD,CAAP,IAAkBD,MAAM,GAAGD,KAA3B;AACD,KARD;AASD,GAdD,CAeA;AAfA,OAgBK;AACD,UAAIQ,KAAK,GAAG,SAASA,KAAT,CAAeC,EAAf,EAAmB;AAC7Bf,QAAAA,KAAK,CAACe,EAAD,CAAL,GAAYpB,QAAQ,CAACqB,MAAT,CAAgB,UAAUZ,KAAV,EAAiBa,CAAjB,EAAoB;AAC9C,iBAAOA,CAAC,GAAGpB,OAAJ,KAAgBkB,EAAvB;AACD,SAFW,CAAZ;AAGD,OAJD;;AAMA,WAAK,IAAIA,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGlB,OAAtB,EAA+BkB,EAAE,EAAjC,EAAqC;AACnCD,QAAAA,KAAK,CAACC,EAAD,CAAL;AACD;AACF;;AAEH,SAAOf,KAAP;AACD","sourcesContent":["export default function mapNodesToColumns() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$children = _ref.children,\n      children = _ref$children === undefined ? [] : _ref$children,\n      _ref$columns = _ref.columns,\n      columns = _ref$columns === undefined ? 1 : _ref$columns,\n      _ref$dimensions = _ref.dimensions,\n      dimensions = _ref$dimensions === undefined ? [] : _ref$dimensions;\n\n  var nodes = [];\n  var heights = [];\n\n  if (columns === 1) {\n    return children;\n  }\n\n  // use dimensions to calculate the best column for each child\n  if (dimensions.length && dimensions.length === children.length) {\n    for (var i = 0; i < columns; i++) {\n      nodes[i] = [];\n      heights[i] = 0;\n    }\n    children.forEach(function (child, i) {\n      var _dimensions$i = dimensions[i],\n          width = _dimensions$i.width,\n          height = _dimensions$i.height;\n\n      var index = heights.indexOf(Math.min.apply(Math, heights));\n      nodes[index].push(child);\n      heights[index] += height / width;\n    });\n  }\n  // equally spread the children across the columns\n  else {\n      var _loop = function _loop(_i) {\n        nodes[_i] = children.filter(function (child, j) {\n          return j % columns === _i;\n        });\n      };\n\n      for (var _i = 0; _i < columns; _i++) {\n        _loop(_i);\n      }\n    }\n\n  return nodes;\n}"]},"metadata":{},"sourceType":"module"}